'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Send, MessageSquare, X, Plus, ChevronDown } from 'lucide-react';
import Image from 'next/image';
import { ChatService, ChatSessionWithMessages } from '@/lib/chatService';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { AIService, CampaignSuggestion, ListSuggestion } from '@/lib/aiService';
import AISuggestionCard from './AISuggestionCard';
import { MessageTrainingService, MessageContext } from '@/lib/messageTrainingService';
import { MessageTemplateManager } from './MessageTemplateManager';
import { AdvancedAIService, PredictiveInsight } from '@/lib/advancedAIService';
import { AdvancedInsightsCard } from './AdvancedInsightsCard';

export default function FloatingChat() {
  const { userProfile } = useAuth();
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [sessions, setSessions] = useState<ChatSessionWithMessages[]>([]);
  const [currentSession, setCurrentSession] = useState<ChatSessionWithMessages | null>(null);
  const [loading, setLoading] = useState(false);
  const [sending, setSending] = useState(false);
  const [message, setMessage] = useState('');
  const [aiSuggestion, setAiSuggestion] = useState<{ type: 'campaign' | 'list'; suggestion: CampaignSuggestion | ListSuggestion } | null>(null);
  const [showTemplates, setShowTemplates] = useState(false);
  const [messageContext, setMessageContext] = useState<MessageContext>({});
  const [showAdvancedInsights, setShowAdvancedInsights] = useState(false);
  const [advancedInsights, setAdvancedInsights] = useState<PredictiveInsight[]>([]);
  const { toast } = useToast();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [isTyping, setIsTyping] = useState(false);
  const [showSessionSelector, setShowSessionSelector] = useState(false);
  const [showSessionSelector, setShowSessionSelector] = useState(false);

  useEffect(() => {
    if (isOpen && !currentSession) {
      initializeChat();
    }
  }, [isOpen]);

  useEffect(() => {
    scrollToBottom();
  }, [currentSession?.messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const initializeChat = async () => {
    try {
      setLoading(true);
      const sessionsData = await ChatService.getChatSessions();
      
      if (sessionsData.length > 0) {
        const firstSession = await ChatService.getChatSession(sessionsData[0].id);
        setCurrentSession(firstSession);
        setSessions(sessionsData.map(s => ({ ...s, messages: [] })));
      } else {
        // Create a new session if none exist
        const newSession = await ChatService.createChatSession();
        const sessionWithMessages = await ChatService.getChatSession(newSession.id);
        setCurrentSession(sessionWithMessages);
        setSessions([{ ...newSession, messages: [] }]);
      }
    } catch (error) {
      console.error('Error initializing chat:', error);
      toast({
        title: 'Error',
        description: 'Failed to initialize chat.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const createNewSession = async () => {
    try {
      const newSession = await ChatService.createChatSession();
      const sessionWithMessages = await ChatService.getChatSession(newSession.id);
      setCurrentSession(sessionWithMessages);
      setSessions(prev => [{ ...newSession, messages: [] }, ...prev]);
      setShowSessionSelector(false);
    } catch (error) {
      console.error('Error creating new session:', error);
      toast({
        title: 'Error',
        description: 'Failed to create new chat session.',
        variant: 'destructive',
      });
  const switchSession = async (sessionId: string) => {
    try {
      const sessionWithMessages = await ChatService.getChatSession(sessionId);
      if (sessionWithMessages) {
        setCurrentSession(sessionWithMessages);
        setShowSessionSelector(false);
      }
    } catch (error) {
      console.error("Error switching session:", error);
      toast({
        title: "Error",
        description: "Failed to switch chat session.",
        variant: "destructive",
      });
    }
  };
    }
  };

  const sendMessage = async () => {
    if (!message.trim() || !currentSession) return;

    try {
      setSending(true);
      setIsTyping(true);
      const userMessage = message.trim();
      
      // Add user message
      await ChatService.addMessage(currentSession.id, 'user', userMessage);
      
      // Get updated session
      const updatedSession = await ChatService.getChatSession(currentSession.id);
      if (!updatedSession) {
        throw new Error('Failed to get updated session');
      }
      setCurrentSession(updatedSession);
      
      // Check if user wants to create campaign or list
      const shouldGenerate = shouldGenerateSuggestion(userMessage);
      
      // Get AI response
      const aiResponse = await ChatService.getAIResponse(updatedSession.messages);
      
      // Add AI response
      await ChatService.addMessage(currentSession.id, 'assistant', aiResponse);
      
      // Generate suggestion if needed
      if (shouldGenerate) {
        const suggestion = await generateSuggestion(userMessage);
        if (suggestion) {
          setAiSuggestion(suggestion);
        }
      }

      // Check if user wants to see templates
      if (userMessage.toLowerCase().includes('template') || userMessage.toLowerCase().includes('message')) {
        setShowTemplates(true);
      }

      // Check if user wants advanced insights
      if (userMessage.toLowerCase().includes('insight') || userMessage.toLowerCase().includes('analyze') || userMessage.toLowerCase().includes('predict')) {
        try {
          const insights = await AdvancedAIService.generatePredictiveInsights(userProfile?.id || '');
          setAdvancedInsights(insights);
          setShowAdvancedInsights(true);
        } catch (error) {
          console.error('Error generating insights:', error);
        }
      }
      
      // Get final updated session
      const finalSession = await ChatService.getChatSession(currentSession.id);
      setCurrentSession(finalSession);
      
      setMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: 'Error',
        description: 'Failed to send message.',
        variant: 'destructive',
      });
    } finally {
      setSending(false);
      setIsTyping(false);
    }
  };

  const shouldGenerateSuggestion = (userMessage: string): boolean => {
    const lowerMessage = userMessage.toLowerCase();
    return (
      (lowerMessage.includes('create campaign') || lowerMessage.includes('new campaign')) ||
      (lowerMessage.includes('create list') || lowerMessage.includes('new list') || lowerMessage.includes('kol list'))
    );
  };

  const generateSuggestion = async (userMessage: string) => {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('campaign')) {
      const suggestion = await AIService.generateCampaignSuggestion(userMessage);
      return { type: 'campaign' as const, suggestion };
    }
    
    if (lowerMessage.includes('list')) {
      const suggestion = await AIService.generateListSuggestion(userMessage);
      return { type: 'list' as const, suggestion };
    }
    
    return null;
  };

  const handleApplySuggestion = (suggestion: CampaignSuggestion | ListSuggestion) => {
    // TODO: Navigate to campaign/list creation with pre-filled data
    toast({
      title: 'Suggestion Applied',
      description: 'Redirecting to creation form...',
    });
    setAiSuggestion(null);
  };

  const handleDismissSuggestion = () => {
    setAiSuggestion(null);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const toggleChat = () => {
    setIsOpen(true);
    setIsMinimized(false);
  };

  const closeChat = () => {
    setShowSessionSelector(false);
    setIsOpen(false);
    setIsMinimized(false);
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={toggleChat}
          size="lg"
          className="w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 p-3"
          style={{ backgroundColor: '#f6feff' }}
        >
          <Image src="/images/logo.png" alt="Logo" width={24} height={24} className="rounded-full" />
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className="w-80 shadow-xl transition-all duration-300 rounded-2xl overflow-hidden chat-container">
        <CardHeader className="pb-3 bg-white border-b border-gray-200 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3 flex-1">
              <div className="rounded-full p-1 shadow-md" style={{ backgroundColor: '#f6feff' }}>
                <Image src="/images/logo.png" alt="Logo" width={16} height={16} className="rounded-full" />
              </div>
              <div>
                <h3 className="font-semibold text-sm text-gray-900">AI Assistant</h3>
                <p className="text-xs text-gray-600">Powered by GPT-3.5</p>
              </div>
            </div>
            <div className="flex items-center space-x-1 relative">
              <Button
                variant="ghost"
                size="sm"
                onClick={closeChat}
                className="h-7 w-7 p-0 text-gray-500 hover:bg-gray-100"
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="p-0">
          <div className="flex flex-col chat-content">
              {/* Messages */}
              <ScrollArea className="flex-1 p-4 chat-scrollbar">
                <div className="space-y-4">
                  {loading && (
                    <div className="text-center py-4">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-[#3e8692] mx-auto"></div>
                      <p className="text-xs text-gray-500 mt-2">Loading...</p>
                    </div>
                  )}
                  
                  {!loading && currentSession?.messages.length === 0 && (
                    <div className="text-center py-8">
                      <div className="rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center shadow-md" style={{ backgroundColor: '#f6feff' }}>
                        <Image src="/images/logo.png" alt="Logo" width={24} height={24} className="rounded-full" />
                      </div>
                      <h3 className="text-sm font-semibold text-gray-900 mb-1">AI Assistant</h3>
                      <p className="text-xs text-gray-600 max-w-[200px] mx-auto">
                        Hello! I'm here to help you with campaigns, KOLs, and more. How can I assist you today?
                      </p>
                    </div>
                  )}
                  
                  {currentSession?.messages.map((msg) => (
                    <div
                      key={msg.id}
                      className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'} chat-message`}
                    >
                      <div
                        className={`max-w-[220px] px-4 py-3 rounded-2xl text-sm message-bubble ${
                          msg.role === 'user'
                            ? 'bg-gradient-to-r from-[#3e8692] to-[#2d5a63] text-white shadow-md'
                            : 'bg-gray-50 text-gray-900 border border-gray-200 shadow-sm'
                        }`}
                      >
                        <div className="flex items-start space-x-2">
                          {msg.role === 'assistant' && (
                            <div className="rounded-full p-1 w-6 h-6 flex-shrink-0 mt-0.5 shadow-sm" style={{ backgroundColor: '#f6feff' }}>
                              <Image src="/images/logo.png" alt="Logo" width={16} height={16} className="rounded-full" />
                            </div>
                          )}
                          <div className="flex-1">
                            <p className={`text-sm leading-relaxed ${msg.role === 'user' ? 'text-white' : 'text-gray-900'}`}>
                              {msg.content}
                            </p>
                            <p className={`text-xs mt-2 ${msg.role === 'user' ? 'text-blue-100' : 'text-gray-500'}`}>
                              {formatTime(msg.created_at || '')}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {/* Typing Indicator */}
                  {isTyping && (
                    <div className="flex justify-start typing-indicator">
                      <div className="bg-gray-50 border border-gray-200 rounded-2xl px-4 py-3 shadow-sm max-w-[220px] message-bubble">
                        <div className="flex items-center space-x-2">
                          <div className="rounded-full p-1 w-6 h-6 shadow-sm" style={{ backgroundColor: '#f6feff' }}>
                            <Image src="/images/logo.png" alt="Logo" width={16} height={16} className="rounded-full" />
                          </div>
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
                          </div>
                          <span className="text-xs text-gray-500 ml-2">AI is typing...</span>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                   
                   {/* AI Suggestion Card */}
                   {aiSuggestion && (
                     <div className="mt-4">
                       <AISuggestionCard
                         type={aiSuggestion.type}
                         suggestion={aiSuggestion.suggestion}
                         onApply={handleApplySuggestion}
                         onDismiss={handleDismissSuggestion}
                       />
                     </div>
                   )}

                   {/* Message Templates */}
                   {showTemplates && (
                     <div className="mt-4">
                       <div className="bg-white border rounded-lg p-4 max-h-96 overflow-y-auto">
                         <div className="flex items-center justify-between mb-4">
                           <h3 className="text-sm font-semibold text-gray-900">Message Templates</h3>
                           <Button
                             variant="ghost"
                             size="sm"
                             onClick={() => setShowTemplates(false)}
                             className="h-6 w-6 p-0"
                           >
                             <X className="h-3 w-3" />
                           </Button>
                         </div>
                         <MessageTemplateManager
                           context={messageContext}
                           onTemplateSelected={(template) => {
                             setMessage(template.content);
                             setShowTemplates(false);
                             MessageTrainingService.incrementUsageCount(template.id);
                           }}
                         />
                       </div>
                     </div>
                   )}

                   {/* Advanced Insights */}
                   {showAdvancedInsights && (
                     <div className="mt-4">
                       <div className="bg-white border rounded-lg p-4 max-h-96 overflow-y-auto">
                         <div className="flex items-center justify-between mb-4">
                           <h3 className="text-sm font-semibold text-gray-900">AI Insights</h3>
                           <Button
                             variant="ghost"
                             size="sm"
                             onClick={() => setShowAdvancedInsights(false)}
                             className="h-6 w-6 p-0"
                           >
                             <X className="h-3 w-3" />
                           </Button>
                         </div>
                         <AdvancedInsightsCard
                           insights={advancedInsights}
                           onApplyInsight={(insight) => {
                             console.log('Applying insight:', insight);
                             setShowAdvancedInsights(false);
                           }}
                           onDismiss={() => setShowAdvancedInsights(false)}
                         />
                       </div>
                     </div>
                   )}
                 </div>
               </ScrollArea>

              {/* Input */}
              <div className="border-t p-4">
                <div className="flex space-x-3">
                  <Input
                    placeholder="Type a message..."
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    disabled={sending}
                    className="flex-1 text-sm h-10 auth-input"
                  />
                  <Button
                    onClick={sendMessage}
                    disabled={!message.trim() || sending}
                    size="sm"
                    className="h-10 w-10 p-0 rounded-xl hover:opacity-90 transition-all duration-200"
                    style={{ backgroundColor: '#3e8692', color: 'white' }}
                  >
                    {sending ? (
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    ) : (
                      <Send className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  } 